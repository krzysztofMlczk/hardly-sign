import { createSlice, PayloadAction, createAsyncThunk } from "@reduxjs/toolkit";
import { RootState } from "../../state/store";
import type { User } from "../../types/user";
import { getUserViaToken } from "../../services/api";

export interface AppState {
  user: User | null;
  loading: boolean;
  isDrawerOpen: boolean;
}

const initialState: AppState = {
  user: null,
  loading: true,
  isDrawerOpen: false,
};

export const setUserByToken = createAsyncThunk(
  "app/setUserByToken",
  async () => {
    // The value we return becomes the `fulfilled` action payload
    return await getUserViaToken();
  }
);

export const AppSlice = createSlice({
  name: "app",
  initialState,
  reducers: {
    setUser: (state, { payload: user }: PayloadAction<User>) => {
      state.user = user;
      state.loading = false;
    },
    logout: (state) => {
      state.user = null;
    },
    toggleDrawer: (state) => {
      state.isDrawerOpen = !state.isDrawerOpen;
    },
    endLoad: (state) => {
      state.loading = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(setUserByToken.pending, (state) => {
        state.loading = true;
      })
      .addCase(setUserByToken.fulfilled, (state, action) => {
        state.user = action.payload;
        state.loading = false;
      })
      .addCase(setUserByToken.rejected, (state) => {
        // TODO: code for error case
        state.loading = false;
      });
  },
});

// ACTION CREATORS are generated for each case reducer function
export const { setUser, logout, toggleDrawer, endLoad } = AppSlice.actions;

// Other code such as selectors can use the imported `RootState` type
// Object containing all selectors
export const select = {
  user: ({ app }: RootState) => app.user,
  loading: ({ app }: RootState) => app.loading,
  isDrawerOpen: ({ app }: RootState) => app.isDrawerOpen,
};

export default AppSlice.reducer;
